{"version":3,"sources":["constants/cities.js","components/BulletinItem/BulletinItem.jsx","constants/localStorage.js","state.js","components/MainPage/MainPage.jsx","components/CreatePage/CreatePage.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["CITIES","BulletinItem","props","useState","caption","item","textBody","phone","city","bulletin","setBulletin","onInputChange","e","console","log","target","name","value","className","TextField","onChange","InputProps","readOnly","multiline","rowsMax","mask","placeholder","Select","disabled","map","i","MenuItem","Button","onClick","toggleReadOnly","Fragment","saveChanges","id","deleteItem","STORAGE_NAME","getLocalStorageItems","JSON","parse","localStorage","getItem","setLocalStorageItems","items","setItem","stringify","MainPage","setItems","useEffect","filter","readOnlyIdItem","setReadOnlyIdItem","updatedState","CreatePage","uuidv4","onsubmit","preventDefault","type","variant","required","label","inputProps","maxLength","rows","textarea","onInput","reportValidity","InputLabel","labelId","Header","handleClick","Paper","MenuList","color","to","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1873ceab.chunk.js","sourcesContent":["export const CITIES = [\r\n  'Москва',\r\n  'Санкт-Петербург',\r\n  'Казань',\r\n  'Нижний Новгород'\r\n];","import React, {useState} from 'react';\r\nimport {CITIES} from \"../../constants/cities\";\r\nimport {TextField, TextareaAutosize, MenuItem, Select, Button} from \"@material-ui/core\";\r\nimport InputMask from \"react-input-mask\";\r\n\r\nconst BulletinItem = (props) => {\r\n\r\n  const [bulletin, setBulletin] = useState({\r\n    caption: props.item.caption,\r\n    textBody: props.item.textBody,\r\n    phone: props.item.phone,\r\n    city: props.item.city\r\n  });\r\n\r\n  function onEditItem() {\r\n    props.toggleReadOnly(false);\r\n  }\r\n\r\n  function onSaveChangesItem() {\r\n    props.toggleReadOnly(true);\r\n    props.saveChanges({\r\n      ...bulletin,\r\n      id: props.item.id\r\n    });\r\n  }\r\n\r\n  const onDeleteItem = () => {\r\n    props.deleteItem(props.item.id);\r\n  }\r\n\r\n  function onInputChange(e) {\r\n    console.log(e)\r\n    const { name, value } = e.target;\r\n    setBulletin({\r\n      ...bulletin,\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  function onCancelChangesItem() {\r\n    setBulletin({\r\n      caption: props.item.caption,\r\n      textBody: props.item.textBody,\r\n      phone: props.item.phone,\r\n      city: props.item.city\r\n    });\r\n    props.toggleReadOnly(true)\r\n  }\r\n\r\n  return (\r\n    <div className='bulletin'>\r\n      <TextField value={bulletin.caption} name=\"caption\" className=\"bulletin-input\" onChange={onInputChange} InputProps={{readOnly: props.readOnly}}/>\r\n      <TextField value={bulletin.textBody} multiline rowsMax=\"2\" name=\"textBody\" className=\"bulletin-input\" onChange={onInputChange} InputProps={{readOnly: props.readOnly}} />\r\n      <InputMask name=\"phone\" mask=\"+(9) 999 999 99 99\" value={bulletin.phone}  onChange={onInputChange} InputProps={{readOnly: props.readOnly}}>\r\n        <TextField className=\"bulletin-input\" placeholder='+(7) 123 456 78 90'/>\r\n      </InputMask>\r\n      <Select value={bulletin.city} name=\"city\" className=\"bulletin-select bulletin-input\" onChange={onInputChange} disabled={props.readOnly} >\r\n        {CITIES.map((city, i) => <MenuItem key={i} value={city}>{city}</MenuItem>)}\r\n      </Select>\r\n      <div>\r\n        {props.readOnly\r\n          ? <Button onClick={onEditItem}>Редактировать</Button>\r\n          : <React.Fragment>\r\n              <Button onClick={onCancelChangesItem}>Отменить</Button>\r\n              <Button onClick={onSaveChangesItem}>Сохранить</Button>\r\n            </React.Fragment>\r\n        }\r\n        <Button onClick={onDeleteItem}>Удалить</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BulletinItem;","export const STORAGE_NAME = \"items\";","import {STORAGE_NAME} from \"./constants/localStorage\";\r\n\r\nexport const getLocalStorageItems = () => JSON.parse(localStorage.getItem(STORAGE_NAME)) || [];\r\nexport const setLocalStorageItems = (items) => localStorage.setItem(STORAGE_NAME, JSON.stringify(items));","import React, {useEffect, useState} from \"react\";\r\nimport BulletinItem from \"../BulletinItem/BulletinItem\";\r\nimport {getLocalStorageItems, setLocalStorageItems} from \"../../state\";\r\n\r\nconst MainPage = () => {\r\n  const [items, setItems] = useState(\r\n    getLocalStorageItems()\r\n  );\r\n  useEffect(() => {\r\n    setLocalStorageItems(items);\r\n  }, [items]);\r\n\r\n  const deleteItem = (id) => {\r\n    setItems(items.filter(item => item.id !== id));\r\n  }\r\n\r\n  let [readOnlyIdItem, setReadOnlyIdItem] = useState(\"\");\r\n\r\n  const saveChanges = (updatedState) => {\r\n    setItems(items.map(item => (item.id === updatedState.id) ? updatedState : item));\r\n  }\r\n\r\n  const toggleReadOnly = (id, value) => {\r\n    console.log(value)\r\n    if(value) {\r\n      setReadOnlyIdItem(\"\")\r\n    } else {\r\n      setReadOnlyIdItem(id)\r\n    }\r\n  }\r\n  useEffect(() => {},[readOnlyIdItem])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className='bulletin-wrapper'>\r\n        {items.map(item => {\r\n            return (\r\n                <BulletinItem\r\n                  key={item.id}\r\n                  item={item}\r\n                  deleteItem={deleteItem}\r\n                  toggleReadOnly={(value) => toggleReadOnly(item.id, value)}\r\n                  saveChanges={saveChanges}\r\n                  readOnly={readOnlyIdItem !== item.id}\r\n                />\r\n            );\r\n          })}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default MainPage;","import React, {useEffect, useState} from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {getLocalStorageItems, setLocalStorageItems} from \"../../state\";\r\nimport {CITIES} from \"../../constants/cities\";\r\nimport { Button, MenuItem, InputLabel, Select, TextField } from '@material-ui/core';\r\nimport InputMask from \"react-input-mask\";\r\n\r\n\r\nconst CreatePage = () => {\r\n  const [item, setItem] = useState({\r\n    id: uuidv4(),\r\n    caption: '',\r\n    textBody: '',\r\n    phone: '',\r\n    city: ''\r\n  });\r\n  const [items, setItems] = useState(\r\n    getLocalStorageItems()\r\n  );\r\n\r\n  useEffect(() => {\r\n    setLocalStorageItems(items);\r\n  }, [items]);\r\n\r\n  const onInputPhone = (e) => {\r\n    e.target.reportValidity();\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    let {name, value} = e.target;\r\n    console.log([name])\r\n    setItem({\r\n      ...item,\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  onsubmit = (e) => {\r\n    e.preventDefault();\r\n    //const phone =\r\n    setItem({\r\n        ...item,\r\n        id: uuidv4(),\r\n        caption: item.caption,\r\n        textBody: item.textBody,\r\n        phone: item.phone,\r\n        city: item.city,\r\n      }\r\n    );\r\n    setItems((items) => [...items, item]);\r\n    console.log(item);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form className='form'>\r\n        <div className='form-wrapper'>\r\n          <div className='form-row'>\r\n            <TextField name=\"caption\" className='input form-caption' type=\"text\" variant=\"outlined\" value={item.caption} onChange={onChange} required label='Заголовок'/>\r\n            <div className='input-description'>Обязательное поле <br/>Не более 140 символов</div>\r\n          </div>\r\n          <div className='form-row'>\r\n            <TextField name=\"textBody\" className=\"input form-text-body\" multiline variant=\"outlined\" inputProps={{maxLength: 300}}\r\n                       rows={4} value={item.textarea} onChange={onChange} required />\r\n            <div className='input-description'>Обязательное поле <br/>Не более 300 символов</div>\r\n          </div>\r\n          <div className='form-row'>\r\n            <InputMask name=\"phone\" mask=\"+(9) 999 999 99 99\" value={item.phone}  onInput={onInputPhone} onChange={onChange}>\r\n              <TextField className='input form-phone' variant=\"outlined\" placeholder='+(7) 123 456 78 90'/>\r\n            </InputMask>\r\n            <div className='input-description'>Обязательное поле</div>\r\n          </div>\r\n          <div className='form-row'>\r\n            <div className='input'>\r\n              <InputLabel id=\"form-city-label\">Город</InputLabel>\r\n              <Select name=\"city\" labelId='form-city-label' id='form-city' className='form-city' variant=\"outlined\" value={item.city} onChange={onChange}>\r\n                <MenuItem value=''>Выберите город</MenuItem>\r\n                {CITIES.map((city, i) => <MenuItem key={i} value={city}>{city}</MenuItem>)}\r\n              </Select>\r\n            </div>\r\n            {/*<div className='input-description'>Заполнено</div>*/}\r\n          </div>\r\n          <Button className='submit-form-button' type=\"submit\" variant=\"contained\">Добавить</Button>\r\n        </div>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CreatePage;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport './header.css';\r\n\r\nconst Header = () => {\r\n  function handleClick() {\r\n\r\n  }\r\n\r\n  return (\r\n    <Paper className='header'>\r\n      <MenuList>\r\n        <MenuItem>\r\n          <NavLink color=\"inherit\" to=\"/\" onClick={handleClick}>\r\n            Главная\r\n          </NavLink>\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <NavLink color=\"inherit\" to=\"/add\" onClick={handleClick}>\r\n            Создать объявление\r\n          </NavLink>\r\n        </MenuItem>\r\n      </MenuList>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Header;","import './App.css';\nimport React from \"react\";\nimport {Route} from \"react-router-dom\";\nimport MainPage from \"./components/MainPage/MainPage\";\nimport CreateBulletinPage from \"./components/CreatePage/CreatePage\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n  return (\n      <div className=\"app-wrapper\">\n        <Header/>\n        <Route exact path='/' render={() => <MainPage/>} />\n        <Route exact path='/add' render={() => <CreateBulletinPage/>} />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}